/** RESPONSIVE UTILITIES **/

// 컨테이너 클래스
.container {
  @include container;
}

.container-fluid {
  width: 100%;
  padding-right: $grid-gutter-width * 0.5;
  padding-left: $grid-gutter-width * 0.5;
  margin-right: auto;
  margin-left: auto;
}

// 그리드 시스템
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$grid-gutter-width * 0.5;
  margin-left: -$grid-gutter-width * 0.5;
}

.col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  padding-right: $grid-gutter-width * 0.5;
  padding-left: $grid-gutter-width * 0.5;
}

// 반응형 그리드 클래스 생성
@include make-grid-columns();

// 반응형 표시/숨김 클래스
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  .d#{$infix}-none {
    @include respond-to($breakpoint) {
      display: none !important;
    }
  }
  
  .d#{$infix}-block {
    @include respond-to($breakpoint) {
      display: block !important;
    }
  }
  
  .d#{$infix}-flex {
    @include respond-to($breakpoint) {
      display: flex !important;
    }
  }
  
  .d#{$infix}-inline {
    @include respond-to($breakpoint) {
      display: inline !important;
    }
  }
  
  .d#{$infix}-inline-block {
    @include respond-to($breakpoint) {
      display: inline-block !important;
    }
  }
}

// 스페이싱 유틸리티
@each $spacer, $value in $spacers {
  .m-#{$spacer} { margin: $value !important; }
  .mt-#{$spacer} { margin-top: $value !important; }
  .mr-#{$spacer} { margin-right: $value !important; }
  .mb-#{$spacer} { margin-bottom: $value !important; }
  .ml-#{$spacer} { margin-left: $value !important; }
  .mx-#{$spacer} { 
    margin-left: $value !important;
    margin-right: $value !important;
  }
  .my-#{$spacer} { 
    margin-top: $value !important;
    margin-bottom: $value !important;
  }
  
  .p-#{$spacer} { padding: $value !important; }
  .pt-#{$spacer} { padding-top: $value !important; }
  .pr-#{$spacer} { padding-right: $value !important; }
  .pb-#{$spacer} { padding-bottom: $value !important; }
  .pl-#{$spacer} { padding-left: $value !important; }
  .px-#{$spacer} { 
    padding-left: $value !important;
    padding-right: $value !important;
  }
  .py-#{$spacer} { 
    padding-top: $value !important;
    padding-bottom: $value !important;
  }
}

// 반응형 스페이싱
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  @include respond-to($breakpoint) {
    @each $spacer, $value in $spacers {
      .m#{$infix}-#{$spacer} { margin: $value !important; }
      .mt#{$infix}-#{$spacer} { margin-top: $value !important; }
      .mr#{$infix}-#{$spacer} { margin-right: $value !important; }
      .mb#{$infix}-#{$spacer} { margin-bottom: $value !important; }
      .ml#{$infix}-#{$spacer} { margin-left: $value !important; }
      .mx#{$infix}-#{$spacer} { 
        margin-left: $value !important;
        margin-right: $value !important;
      }
      .my#{$infix}-#{$spacer} { 
        margin-top: $value !important;
        margin-bottom: $value !important;
      }
      
      .p#{$infix}-#{$spacer} { padding: $value !important; }
      .pt#{$infix}-#{$spacer} { padding-top: $value !important; }
      .pr#{$infix}-#{$spacer} { padding-right: $value !important; }
      .pb#{$infix}-#{$spacer} { padding-bottom: $value !important; }
      .pl#{$infix}-#{$spacer} { padding-left: $value !important; }
      .px#{$infix}-#{$spacer} { 
        padding-left: $value !important;
        padding-right: $value !important;
      }
      .py#{$infix}-#{$spacer} { 
        padding-top: $value !important;
        padding-bottom: $value !important;
      }
    }
  }
}

// 텍스트 정렬
.text-left { text-align: left !important; }
.text-center { text-align: center !important; }
.text-right { text-align: right !important; }
.text-justify { text-align: justify !important; }

// 반응형 텍스트 정렬
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  .text#{$infix}-left {
    @include respond-to($breakpoint) {
      text-align: left !important;
    }
  }
  
  .text#{$infix}-center {
    @include respond-to($breakpoint) {
      text-align: center !important;
    }
  }
  
  .text#{$infix}-right {
    @include respond-to($breakpoint) {
      text-align: right !important;
    }
  }
}

// 폰트 크기
@each $size, $value in $font-sizes {
  .fs-#{$size} { font-size: $value !important; }
}

// 반응형 폰트 크기
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  @include respond-to($breakpoint) {
    @each $size, $value in $font-sizes {
      .fs#{$infix}-#{$size} { font-size: $value !important; }
    }
  }
}

// 플렉스 유틸리티
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

// 반응형 플렉스 유틸리티
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  .flex#{$infix}-row {
    @include respond-to($breakpoint) {
      flex-direction: row !important;
    }
  }
  
  .flex#{$infix}-column {
    @include respond-to($breakpoint) {
      flex-direction: column !important;
    }
  }
  
  .justify-content#{$infix}-start {
    @include respond-to($breakpoint) {
      justify-content: flex-start !important;
    }
  }
  
  .justify-content#{$infix}-center {
    @include respond-to($breakpoint) {
      justify-content: center !important;
    }
  }
  
  .justify-content#{$infix}-between {
    @include respond-to($breakpoint) {
      justify-content: space-between !important;
    }
  }
  
  .align-items#{$infix}-center {
    @include respond-to($breakpoint) {
      align-items: center !important;
    }
  }
}

// 위치 유틸리티
.position-static { position: static !important; }
.position-relative { position: relative !important; }
.position-absolute { position: absolute !important; }
.position-fixed { position: fixed !important; }
.position-sticky { position: sticky !important; }

// 너비 유틸리티
.w-25 { width: 25% !important; }
.w-50 { width: 50% !important; }
.w-75 { width: 75% !important; }
.w-100 { width: 100% !important; }
.w-auto { width: auto !important; }

// 높이 유틸리티
.h-25 { height: 25% !important; }
.h-50 { height: 50% !important; }
.h-75 { height: 75% !important; }
.h-100 { height: 100% !important; }
.h-auto { height: auto !important; }

// 반응형 너비/높이
@each $breakpoint in map-keys($breakpoints) {
  $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
  
  .w#{$infix}-25 {
    @include respond-to($breakpoint) {
      width: 25% !important;
    }
  }
  
  .w#{$infix}-50 {
    @include respond-to($breakpoint) {
      width: 50% !important;
    }
  }
  
  .w#{$infix}-75 {
    @include respond-to($breakpoint) {
      width: 75% !important;
    }
  }
  
  .w#{$infix}-100 {
    @include respond-to($breakpoint) {
      width: 100% !important;
    }
  }
}

// 접근성 유틸리티
.sr-only {
  @include sr-only;
}

.sr-only-focusable {
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

// 그림자 유틸리티
@each $shadow, $value in $shadows {
  .shadow-#{$shadow} { box-shadow: $value !important; }
}

// 반응형 이미지
.img-fluid {
  @include responsive-image;
}

// 반응형 비디오
.video-responsive {
  @include responsive-video;
}

// 접근성 개선
.focus-visible {
  @include focus-visible;
}

// 다크 모드 지원
@include dark-mode {
  body {
    background-color: #121212;
    color: #ffffff;
  }
}

// 고대비 모드 지원
@include high-contrast {
  .btn {
    border: 2px solid currentColor;
  }
  
  .card {
    border: 2px solid currentColor;
  }
}

// 모션 감소 설정 지원
@include reduced-motion {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
